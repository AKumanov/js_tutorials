					--------------------------------
					BASIC DJANGO INTERVIEW QUESTIONS
					--------------------------------

1 Explain Django Architecture?

Answer ---> Django follows the MVT (Model View Template) pattern which is based on the Model View Controller architecture.
	Itâ€™s slightly different from the MVC pattern as it maintains its own conventions, so, the controller is handled by the framework itself. 
	The template is a presentation layer. It is an HTML file mixed with Django Template Language (DTL). 
	The developer provides the model, the view, and the template then maps it to a URL, and finally, Django serves it to the user.

2 Explain the django project directory structure
_______________________________________________

Answer ---> manage.py - A coomnad-line utility that allows you to interact with your Django project
	--> __init__.py - An empty file that tells Python that the current directory should be considered as a Python package.
	--> settings.py - Comprises the configurations of the current project like DB connections.
	--> urls.py - All the URLs of the prioject are present here.
	--> wsgi.py - This is an entry point for your application which is used by the web servers to serve the project you have created.

3 What are models in Django?
_______________________________________________

Answer ---> A model in Django refers to a class that maps to a database table or databse collection.
	Each attribute of the Django model class represents a database field. They are defined in app/models.py.
	Example:	_________________________________________________________
			|1	from django.db import models			|
			|2	class SampleModel(models.Model):		|
			|3		field1 = models.Charfield(max_length=50)|
			|4		field2 = models.IntegerField()		|
			|5		class Meta:				|
			|6			db_table = "sample_model"	|
			|7______________________________________________________|
	Every model inherits from django.db.models.Model
	Our example has 2 attributes (1 char and 1 integer field), those will be in the table fields.
	The metaclass helps you set things like available permissions, singular and plural versions of the table name,
		whether the model is abstract or not, etc.

4 What are templates in Django or Django template language?
_______________________________________________

Answer ---> Templates are an integral part of the Django MVT architecture. 
	They generally comprise HTML, CSS and JS in which dynamic variables and information are embedded with the help of views.
	Some constructs are recognzed and interpreted by the template engine.
	The main ones are variabes and tags.
	A template is rendered with a context. Rendering just replaces variables with their values, present in the context, and processes tags.
	Everything else remains as it is.
	The syntax of the Django template language includes the following four constructs:
	1 - Variables 2 - Tags 3 - Filters 4 - Commments

5 What are views in Django?
_______________________________________________

Answer ---> A view function is simply a python function that takes a web request and returns a web response.
	This response can be HTML contents of a web page, or a redirect, or a 404 error, or an XML document, or an image, etc.
	There are two types of views:
		1 - Function-Based-View - in this, we import our views as a function
		2 - Class-Based-Views - It's an object-oriented approach.

6 What is Django ORM?
_______________________________________________

Answer ---> This ORM (an acronym for Object Relational Mapper) enables us to interact with databases in a more pythonic way
	like we can avoid writing raw queries, it is possible to retrieve, save, delete and perform other operations over the database without ever writing any SQL query.
	It works as an abstraction layer between the models and the database.

7 Define static files and explain their uses
_______________________________________________

Answer ---> Websites generally need to serve additional files such as images, JS script or CSS.
	In Django, these files are referred to as 'static files', Apart from that Django provides
	django.contrib.staticfiles to manage these static files.
	
8 What is Django Rest Framework(DRF)?
_______________________________________________

Answer ---> Django Rest Framework is an open-source framework based upon Django 
	which lets you craete RESTful API's rapidly.

9 What is django-admin and manage.py and explain it's commands
_______________________________________________

Answer ---> django-admin is Django's command-line utility for administrative tasks.
	In addition to this, a manage.py file is also automatically created in each Django project.
	Not only does it perform the same purpose as the django-admin but alko sets DJANGO_SETTINGS_MODULE env
	variable to point to the project's settings.py file.
	COMMANDS:
	---------
	django-admin-help --> used to display usage information and a list of the commands provided by each application.
	django-admin version --> used to check you Django version
	django-admin check --> used to inspect the entire Django project for common problems
	django-admin compilemessages --> Compiles .po files craeted by makemessages to .mo files for use with the help or built-in gettext support.
	djagno-admin createcachetable --> Crates the cache tables for use in the database cache backend
	django-admin dbshell - runs the command-line client for the db engine specified in your ENGINE setting(s),
		with the connection params (USER, PASSWORD, DB_NAME) specified settings file.
	django-admin diffsettings --> Shows the difference between the existing settings file and Django's default settings.
	django-admin dumpdata --> Used to the dumpdata from the database
	django-admin flush --> Flush all values from the db and also re-executes any post-sync hanlders specified in the code.
	django-admin inspectdb --> Generates django models from existing db tables
	django-admin loaddata --> loads the data into the database from the fixture file.
	django-admin makemessages --> Used for translation purpose and it generates a message file too.
	django-admin makemigrations --> Generates new migrations as per the changes detected in your models.
	django-admin migrate --> Executes SQL commands after which the db state with the current set of models and migrations are synced.
	django-admin runserver --> Starts a light-weight Web server on the local machine for dev.
		The default server runs on port 8000 on the IP address 127.0.0.1. You can pass a custom IP address and port number explicitly if you want.
	django-admin sendtestemail --> This is used to confirm email sending through Django is working by sending a test email to the recipient(s)
	django-admin shell --> Starts the Python interactive interpreter.
	django-admin showmigrations --> Shows all migrations present in the project.
	django-admin sqlflush --> prints the SQL statements that would be executed for the flush command mentioned above.
	django-admin sqlmigrate --> prints the SQL statement for the named migration.
	django-admin sqlsequencereset --> output the SQL queries for resetting sequences for the given app name(s)
	django-admin squashmigrations --> squashes a range of migrations for a particular app_label.
	django-admin startapp --> Creates a new Django app for the given app name within the current dir or at the given destination.
	django-admin test --> runs tests for all installed apps.
	django-admin testserver --> runs a django dev server using data from the given fixture(s)
	django-admin changepassword --> offers a method to change the user's password.
	django-admin createsuperuser --> creates a user account with all permissions (also known as superuser account)
	django-admin remove stale contenttypes --> removes stale content types (from deleted models) in your database.
	django-admin clearsessions --> can be used to clean out expired sessions or as a cron job.
	---------

10 What is Jinja templating
_______________________________________________

Answer ---> Jinja Templating is a very popular templating engine for Python, the latest version is Jinja2
	Some of its features are:
		1 - Sandbox Execution - this is a sandbox(or a protected) framework for automating the testing process
		2 - HTML Escaping - it provides automatic HTML Escaping as <, >, & characters have special values in templates and if using
			a regular text, these symbols can lead to XSS Attacks which Jinja deals with automatically.
		3 - Template Inheritance
		4 - Generates HTML templates much faster than the default engine
		5 - Easier to debug as compared to the default engine.

11 What is Django URLs?
_______________________________________________

Answer ---> URLs are one of the most important parts of a web application and Django provides you with an elegant way
		to design your own custom URLs with help of its module known as URLconf (URL Configuration).
		You can design your own URLs in Django in the way you like and then map them to the python function (View func).
		These URLs can be static as well as dynamic. These URLs as present in the urls.py where they are matched with
		the equivalent view function
	
12 What is the difference between a project and an app in Django?

Answer ---> In simple words Project is the entire Django application and an App is a module inside the project
		that deals with one specific use case.
		For example, payment system(app) in the eCommerce app(Project)

13 What are different model inheritance styles in Django?

Answer ---> 
		1 Abstract Base Class Inheritance - Used when you only need the parent class to hold information that you don't want to write for each child model.
		2 Multi-Table Model Inheritance - Used when you are subclassing an existing model and need each model to have its own table in the database.
		3 Proxy Model Inheritance - Used when you want to retain the model's field while altering the python level functioning of the model.

					---------------------------------------
					INTERMEDIATE DJANGO INTERVIEW QUESTIONS
					---------------------------------------

14 What are Django Signals?
_______________________________________________

Answer ---> Whenever there is a modification in a model, we may need to trigger some actions.
		Django provides an elegant way to handle these in the form of singals.
		The signals are the utilities that allow us to associate events with actions.
		We can implement these by developing a function that will run a signal calls it.
	LIST OF BUILT-IN SIGNALS IN THE MODELS:
	
	----------------------------------------------------------------------------------------------
		SIGNALS					Description
	----------------------------------------------------------------------------------------------
	django.db.models.pre_init &		Sent before or after a model's _init_()
	django.db.models.post_init		method is called
	----------------------------------------------------------------------------------------------
	django.db.models.signals.pre_save &	Sent before or after a model's save()
	django.db.models.signals.post_save	method is called.
	----------------------------------------------------------------------------------------------
	django.db.models.singals.pre_delete &	Sent before or after a models' delete() method or 
	django.db.models.signals.post_delete	queryset delete() method is called
	----------------------------------------------------------------------------------------------
	django.db.models.singals.m2m_changed	Sent when a ManyToManyField is changed
	----------------------------------------------------------------------------------------------
	django.core.signals.request_started &	Sent when an HTTP request is started 
	django.core.signals.request_finished	or finished.
	----------------------------------------------------------------------------------------------

15 Explain the caching strategies in the Django?
_______________________________________________

Answer ---> Caching refers to the technique of storing the output results when they are processed initially
		so that the next time when the same results are fetched again, instead of processing again those 
		already stored results can be used, which leads to faster accessing as well as less resource utilization.
		Django provides us with a robust cache system that is able to store dynamic web pages so that 
		these pages don't need to be evaluated again for each request.

	SOME OF THE CACHING STRATEGIES IN DJANGO ARE LISTED BELLOW

	----------------------------------------------------------------------------------------------
		STRATEGY				Description
	----------------------------------------------------------------------------------------------
	Memcached				Sent before or after a model's _init_()
	django.db.models.post_init		method is called
	----------------------------------------------------------------------------------------------
	django.db.models.signals.pre_save &	Sent before or after a model's save()
	django.db.models.signals.post_save	method is called.
	----------------------------------------------------------------------------------------------
	django.db.models.singals.pre_delete &	Sent before or after a models' delete() method or 
	django.db.models.signals.post_delete	queryset delete() method is called
	----------------------------------------------------------------------------------------------
	django.db.models.singals.m2m_changed	Sent when a ManyToManyField is changed
	----------------------------------------------------------------------------------------------
	django.core.signals.request_started &	Sent when an HTTP request is started 
	django.core.signals.request_finished	or finished.
	----------------------------------------------------------------------------------------------

16 Explain user authentication in Django?
_______________________________________________

Answer ---> Django comes with a built-in user authentication system, which handles objects like users, groups,
		user-permissions, and few cookie-based user sessions. Django User authentication not only authenticates
		the user but also authorizes him.
	The System consists and operates on these objects:
		1 - Users
		2 - Permissions
		3 - Password Hashing System
		4 - Forms Validation
		5 - A pluggable backend system

17 How to configure static files?
_______________________________________________

Answer ---> Ensure that django.contrib.staticfiles is added to your INSTALLED_APPS
		In your settings.py file define STATIC_URL or ex.
		STATIC_URL = '/static/'
		In your Django templates, use the static template tag to create the URL for the given relative path
		using the configuret STATICFILES_STORAGE
		Store your static files in a folder called static in your app.

18 Explain Django Response lifecycle?
_______________________________________________

Answer ---> Whenever a request is made to a web page, Django creates an HttpRequest object that contains metadata about the request.
		After that Django loads the particular view, passing the HttpRequest as the first argument to the view function.
		Each view will be returning an HttpResponse object.
		On the big picture the following steps occur when a request is received by Django: 
	1. First of the Django settings.py file is loaded which also contains vairous middleware classes (MIDDLEWARES)
	2. The middlewares are also executed in the order in which they are mentioned in the MIDDLEWARES
	3. From here on the rquest is now moved to the URL Router, who simply gets the URL path from the request and tries
		to map with our given URL paths in the urls.py
	4. As soon as it has mapped, it will call the equivalent view function, from where an aquivalent response is generated.
	5. The response also passes through the response middlewares and send back to the client/browser.

19 What databases are supported by Django?
_______________________________________________

Answer ---> PostgreSQL and MySQL, SQLite and Oracle. Apart from these, Django also supports databases such as ODBC, Microsoft SQL Server, IBM DB2,
		SAP SQL Anywhere, and Firebird using third-party packages. Note: Officially Django doesn't support any no-SQL dbs.

20 What's the use of a session framework?
_______________________________________________

Answer --->  Using the session framework, you can easily store and retrieve arbitrary data based on the pre-site-visitors. It stores data on the server-side
		and takes care of the process of sending and receiving cookies. These cookies just consist of a session ID, not the acutal data itself
		unless you explicitly use a cookie-based backend.

21 What's the use of Middleware in Django?
_______________________________________________

Answer ---> Middleware is something that executes between the request and the response. In simple words, you can say it acts as a bridge between the request
		and the response. Similarly in Django when a request is made it moves through middlewares to views and data is passed through middleware as a response.

22 What is context in Django?
_______________________________________________

Answer ---> Context is a dictionary mapping template variable name given to Python objects in Django. This is the general name, but you can give any other name of your choice
		if you want.

23 What is django.shortcuts.render function?
_______________________________________________

Answer ---> When a view function returns a webpage as HttpResponse instead of a simple string, we use render().
		Render function is a shortcut function that lets the developer easily pass the data dictionary with the templating engine.
		This function then combines the template with a data dictionary via templating engine. Finally, this render() returns as
		HttpResponse with the rendered text, which is the data returned by models. Thus, Django render() bypasses most of the
		developer's work and lets him use different template engines.
	The basic syntax: --> return render(request, template_name.html, context=None, content_type=None, status=None, using=None)
		The request is the parameter that generates the response. The template name is the HTML template used, whereas the context 
		is the dict of the data passed on the page from python. You can also specify the content type, the status of the data you passed and the render you are returning.

24 What's the significance of the settings.py file?
_______________________________________________

Answer ---> As the name suggests this file stores the configurations or settings of our Django project, like db configuration, backend engines,
		middlewares, installed applications, main URL configurations, static file addresses, templating engines, security keys, allowed hosts and much more.

25 How to view all items in the Model?
_______________________________________________

Answer ---> ModelName.objects.all()

26 How to filter items in the Model?
_______________________________________________

Answer ---> ModelName.objects.filter(field_name="term")

					-----------------------------------
					ADVANCED DJANGO INTERVIEW QUESTIONS
					-----------------------------------

27 How to use file-based sessions?
_______________________________________________

Answer ---> To use the same, you need to set the SESSION_ENGINE settings to "django.contrib.sessions.backend.file"

28 What is mixin?
_______________________________________________

Answer ---> Mixin is a type of multiple inheritances wherein you can combine behaviours and attributes of more than one parent class.
		It provides us with an excellent way to reuse code from multiple classes. One drawback of using mixins is that 
		it becomes difficult to analyze what a class is doing and which method to override in case of its code being too scattered between multiple classes.

29 What is Django Field Class?
_______________________________________________

Answer ---> 'Field' refers to an abstract class that represents a column in the db table. The Field class is just a subclass of RegisterLookupMixin. 
		In Django, these fields are used to create db tables (db_types()) which are used to map python types to the db using get_prep_value() and
		other way around using from_db_value() method. Therefore, fields are fundamental pieces if different Django APIs such as models and querysets.

30 Why is permanent redirection not a good option?
_______________________________________________

Answer ---> Permanent redirection is used only when you don't want to lead visitors to the old URLs. The response of the permanent redirections is cached by the 
		browser so when you try to redirect to something else it will cause issues. Since this is a browser-side operation if your user wants to move 
		to a new page it will load the same page.

31 Difference between Django OneToOneField and Foreign Field
_______________________________________________

Answer ---> Both of them are one of the most common types of fields used in Django. The only difference between these two is that ForeignKey field consists of 
		on_delete option along with model's class because it's used for many-to-one relationships while on the other hand, the OneToOneField only carries out
		a one-to-one relationship and requires only the model's class.

32 How can you combine multiple QuerySets in a View?
_______________________________________________

Answer ---> Initially, Concatenating QuerySets into lists is believed to be the easiest approach. Here's an example: 
			from itertools import chain
			result_list = list(chain(model1_list, model2_list, model3_list))

33 How to get a particular item in the Model?
_______________________________________________

Answer ---> ModelName.objects.get(id="term")
		Note: If there are no results that match the query, get() will raise a DoesNotExist exception. If more than one item matches the given query(),
		it'll raise MultipleObjectsReturned, which is also an attribute of the model class itself.

